@page
@using Net.Leksi.Pocota.Test.RandomPocoUniverse;
@model ContractModel
@foreach (string usng in Model.Usings.OrderBy(v => v))
{
    <text>using @usng;
</text>
}
using  Net.Leksi.Pocota.Common;


namespace @UniverseOptions.Namespace;

[PocoContract("Random", Version = "v1.0", RoutePrefix = "/api")]
@foreach(EntityNode entity in Model.Universe.Nodes.Where(n => n is EntityNode && n.Base is null))
{
    <text>[Poco(typeof(@entity.Name), PrimaryKey = new object[] { @Html.Raw(string.Join(", ", entity.KeyDefinition)) }@if(entity.AccessProperties.Any()){<text>, 
        AccessProperties = new string[] { @Html.Raw(string.Join(", ", entity.AccessProperties.Select(s => $"\"{s}\""))) }</text>})]
</text>
}
@foreach (Node entity in Model.Universe.Nodes.Where(n => n is EntityNode && n.Base is { }))
{
    <text>[Poco(typeof(@entity.Name))]
</text>
}
@foreach (Node envelope in Model.Universe.Nodes.Where(n => n is not EntityNode))
{
    <text>[Poco(typeof(@envelope.Name))]
</text>
}
public interface @UniverseOptions.ContractName
{
@foreach(MethodModel mm in Model.Methods)
{
    if (mm.Properties.Any()) {
        <text>    [Properties(new string[] {
        @foreach(string path in mm.Properties)
        {
            <text>        "@path",
</text>
        }
    })]
</text>
    }
    <text>    @Html.Raw(mm.ReturnType) @mm.Name@{}(@string.Join(", ", mm.Parameters.Select(p => $"{p.Type} {p.Name}")));
</text>
}
}
