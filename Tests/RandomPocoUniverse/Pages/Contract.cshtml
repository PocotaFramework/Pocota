@page
@using Net.Leksi.Pocota.Common;
@using Net.Leksi.Pocota.Test.RandomPocoUniverse;
@model ContractModel
@foreach (string usng in Model.Usings.OrderBy(v => v))
{
    <text>using @usng;
</text>
}
using  Net.Leksi.Pocota.Common;


namespace @UniverseOptions.Namespace;

public class @UniverseOptions.ContractName: Contract
{
    public override string Version => "v1.0";
    public override string RoutePrefix => "/api";
    public override void AddPocos()
    {
@foreach(EntityNode entity in Model.Universe.Nodes.Where(n => n is EntityNode))
{
    <text>        Entity<@entity.Name>()
            .PrimaryKey(p => new object[]{@Html.Raw(string.Join(",", @entity.PrimaryKey.Select(pd => $"p.{pd.Name}")))})@if(entity.AccessProperties.Any()){<text>
            .AccessSelector(p => new object[]{
                @Html.Raw(string.Join(",\n                ", @entity.AccessProperties.Select(ap => $"p.{ap}")))
            })</text>}@if(entity.Calculated.Any()){<text>
            .Calculated(p => new object[]{
                @Html.Raw(string.Join(",\n                ", @entity.Calculated.Select(ap => $"p.{ap}")))
            })</text>}@foreach(PropertyDescriptor pd in entity.Properties.Where(p => p.Link is {})){<text>
            .Link<@pd.Link!.Owner.Name>(p => p.@pd.Name@(pd.IsNullable ? "!" : string.Empty), p => p.@pd.Link!.Name@(pd.Link!.IsNullable ? "!" : string.Empty))</text>};
</text>
}
@foreach (Node envelope in Model.Universe.Nodes.Where(n => n is not EntityNode))
{
    <text>        Envelope<@envelope.Name>();
</text>
}
    }
@foreach(MethodModel mm in Model.Methods)
{
    <text>    public @Html.Raw(mm.ReturnType) @mm.Name@{}(@string.Join(", ", mm.Parameters.Select(p => $"{p.Type} {p.Name}")))
    {
    @if(mm.Properties.Any()){
        <text>        UseProperty<@Html.Raw(mm.ReturnItemType)>(o => new object[]{
            @Html.Raw(string.Join(",\n            ", @mm.Properties.Select(p => (p.EndsWith('$') ? $"Mandatory(o.{p.Substring(0, p.Length - 1)})" : $"o.{p}"))))
        });
</text>
    }
        throw new NotImplementedException();
    }
</text>
}
}
