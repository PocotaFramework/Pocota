@page
@using Net.Leksi.Pocota.Common
@model ClassModel
@Html.Partial("Header", Model)

public class @Model.ClassName : @Html.Raw(string.Join(", ", Model.Interfaces))
{
@foreach (MethodModel mm in Model.Methods)
{
    if(mm.PropertyUseVariable is {})
    {
        <text>    private static readonly PropertyUse @mm.PropertyUseVariable = @Html.Partial("PropertyUse", mm.PropertyUse);
</text>
    }
}

@foreach (MethodModel mm in Model.Methods)
{
    foreach(AttributeModel am in mm.Attributes)
    {
        <text>    [@Html.Raw(am.ToString())]
</text>
    }
    <text>    public @mm.ReturnType @mm.Name@{}(@Html.Raw(string.Join(", ", mm.Parameters.Select(v => $"{v.Type} {v.Name}")))) 
    {
        IPocoContext @mm.PocoContextVariable = HttpContext.RequestServices.GetRequiredService<IPocoContext>();
        @mm.PocoContextVariable@{}.PropertyUse = @mm.PropertyUseVariable;
        @mm.PocoContextVariable@{}.ExpectedOutputType = typeof(@Html.Raw(mm.ExpectedOutputType));
        @mm.PocoContextVariable@{}.ControllerContext = ControllerContext;
    @if(mm.Filters.Count > 0)
    {
        foreach(FilterModel fm in mm.Filters)
        {
            <text>        @fm.Type @fm.Variable = default!;
</text>
        }
        <text>        JsonSerializerOptions @mm.JsonSerializerOptionsVariable = @mm.PocoContextVariable@{}.CreateJsonSerializerOptions();
</text>
        foreach(FilterModel fm in mm.Filters.Where(v => !v.IsConvertible))
        {
            <text>        if (@fm.Name is { })
        {
            @fm.Variable = JsonSerializer.Deserialize<@fm.Type>(HttpUtility.UrlDecode(@fm.Name), @mm.JsonSerializerOptionsVariable)@if (!fm.IsNullable) {<text>!</text>};
        }
</text>
        }
        foreach(FilterModel fm in mm.Filters.Where(v => v.IsConvertible))
        {
            <text>        @fm.Variable = @if (fm.IsNullable) {<text> @fm.Name is null
                    ? null
                    : </text>}(@fm.Type)Convert.ChangeType(@fm.Name,typeof(@fm.Type));
</text>
        }
    }
        @Model.ControllerInterface @mm.ControllerVariable = HttpContext.RequestServices.GetRequiredService<@Model.ControllerInterface>();
        @mm.ControllerVariable@Html.Raw(".")@mm.Name@Html.Raw($"(")@string.Join(", ", mm.CallParameters));
    }

</text>
}
    [@Html.Raw(Model.UpdateRouteAttribute!.ToString())]
    public override void Update()
    {
        base.Update();
    }
}