@page
@using Net.Leksi.Pocota.Common;
@model ClassModel

@Html.Partial("HeaderComment", Model)

@foreach (string usng in Model.Usings.OrderBy(v => v))
{
    <text>using @usng;
</text>
}

namespace @Model.NamespaceValue;

public class @Model.ClassName : @Html.Raw(string.Join(", ", Model.Interfaces))
{
@foreach(PropertyModel pm in Model.Properties)
{
    <text>    private@{}@pm.FieldReadOnly @Html.Raw(pm.ObjectType)@pm.NullableSuffix @pm.FieldName@if(pm.CanBeNull && (!pm.IsList ||!pm.IsReadOnly)){<text> = null@{}@if(!pm.IsNullable){<text>!</text>}</text>};
    @if(pm.IsList && pm.IsPoco)
    {
        <text>    private@{}@pm.FieldReadOnly @Html.Raw(pm.Type)@pm.NullableSuffix @pm.ProxyFieldName@if(pm.CanBeNull && (!pm.IsList ||!pm.IsReadOnly)){<text> = null@{}@if(!pm.IsNullable){<text>!</text>}</text>};
</text>    
    }
    private PropertyAccessMode @pm.AccessModeFieldName = PropertyAccessMode.Forbidden;
</text>    
}

    public @Model.ClassName@{}()
    {
@foreach (PropertyModel pm in Model.Properties.Where(p => p.IsReadOnly && p.IsList))
{
    <text>        @pm.FieldName = new();
    @if(pm.IsPoco)
    {
        <text>        @pm.ProxyFieldName = new ListProxy@{}@Html.Raw($"<{pm.ItemObjectType}, {pm.ItemType}>")@{}(@pm.FieldName);
</text>
    }
</text>    
}
    }

@foreach(PropertyModel pm in Model.Properties)
{
    <text>    public @Html.Raw($"{pm.ObjectType}{pm.NullableSuffix}") @pm.Name
    {
        get
        {
            if(@pm.AccessModeFieldName is PropertyAccessMode.Forbidden)
            {
                throw new @nameof(InvalidOperationException)@{}(s_noAccess);
            }
            return @pm.FieldName;
        }
    @if(!pm.IsReadOnly || !pm.IsList)
    {
        <text>        set
        {
            if(!IsUnderConstruction && @pm.AccessModeFieldName is not PropertyAccessMode.Full)
            {
                throw new @nameof(InvalidOperationException)@{}(s_noAccess);
            }
            @pm.AccessModeFieldName = PropertyAccessMode.@{}@if(pm.IsReadOnly){<text>ReadOnly</text>} else {<text>Full</text>};
            @pm.FieldName = value;
            @if(pm.IsList && pm.IsPoco)
            {
                <text>            @pm.ProxyFieldName = new ListProxy@{}@Html.Raw($"<{pm.ItemObjectType}, {pm.ItemType}>")@{}(@pm.FieldName);
</text>
            }
        }
</text>
    }
    }
    @Html.Raw($"{pm.Type}{pm.NullableSuffix}") @Html.Raw(Model.Interfaces[1]).@pm.Name
    {
        get
        {
            return @if(pm.IsList && pm.IsPoco){<text>@pm.ProxyFieldName</text>} else {<text>@pm.Name</text>};
        }
    @if(!pm.IsReadOnly)
    {
        <text>       set
        {
        @if(pm.IsPoco)
        {
            @if(pm.IsList)
            {
            <text>            @pm.ProxyFieldName = value;
            @pm.FieldName = new ListProxy@{}@Html.Raw($"<{pm.ItemType}, {pm.ItemObjectType}>")@{}(@pm.ProxyFieldName);
</text>
            }
            else{
            <text>            @pm.Name = (value as @Html.Raw(pm.ObjectType))!;
</text>
            }
        }
        else
        {
            <text>            @pm.Name = value;
</text>
        }
        }
</text>
    }
    }
</text>    
}
}