@page
@using Net.Leksi.Pocota.Common;
@model ClassModel

@Html.Partial("Header", Model)

public class @Model.ClassName : @Html.Raw(string.Join(", ", Model.Interfaces))
{
@if(Model.PrimaryKey is { })
{
    <text>    #region PrimaryKey    
    public class PrimaryKeyClass: @Model.PrimaryKey.Name
    {
        private readonly @Model.ClassName _owner;
        public override object? this[int index]
        {
            get
            {
                switch (index)
                {
    @for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
    {
        if(Model.PrimaryKey!.Parts[i].Property is {})
        {
            <text>                    case @i:
            @if(!Model.PrimaryKey!.Parts[i].IsProperty)
            {
                 <text>                       return ((@Model.PrimaryKey!.Parts[i].PrimaryKeyClassName)_owner.@Model.PrimaryKey!.Parts[i].Property).@Model.PrimaryKey!.Parts[i].KeyReference;
</text>
            }
            else
            {
                 <text>                       return _owner.@Model.PrimaryKey!.Parts[i].Property;
</text>
            }
</text>
        }
    }
                    default:
                        return base[index];
                }
            }
            set
            {
                if (!_owner.IsUnderConstruction)
                {
                    throw new @nameof(InvalidOperationException)@{}();
                }
                switch (index)
                {
    @for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
    {
        if(Model.PrimaryKey!.Parts[i].Property is {})
        {
            <text>                    case @i:
            @if(Model.PrimaryKey!.Parts[i].IsProperty)
            {
                <text>                        @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk value@{}@i = value as @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk;
                        if (value is null || value@{}@i is null)
                        {
                            throw new @nameof(InvalidCastException)@{}();
                        }
                        _owner.@Model.PrimaryKey!.Parts[i].Property = (@Model.PrimaryKey!.Parts[i].Type)value@{}@i!;
                        break;
</text>
            }
            else
            {
                <text>                        @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk value@{}@i = value as @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk;
                        if (value is null || value@{}@i is null)
                        {
                            throw new @nameof(InvalidCastException)@{}();
                        }
                        ((@Model.PrimaryKey!.Parts[i].PrimaryKeyClassName)_owner.@Model.PrimaryKey!.Parts[i].Property).@Model.PrimaryKey!.Parts[i].KeyReference = (@Model.PrimaryKey!.Parts[i].Type)value@{}@i!;
                        break;
</text>
            }
</text>
        }
    }
                    default:
                        base[index] = value;
                        break;
                }
            }
        }
        public override object? this[string name]
        {
            get
            {
                switch (name)
                {
    @for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
    {
        if(Model.PrimaryKey!.Parts[i].Property is {})
        {
            <text>                    case @Html.Raw($"\"{@Model.PrimaryKey!.Parts[i].Name}\""):
            @if(!Model.PrimaryKey!.Parts[i].IsProperty)
            {
                 <text>                       return ((@Model.PrimaryKey!.Parts[i].PrimaryKeyClassName)_owner.@Model.PrimaryKey!.Parts[i].Property).@Model.PrimaryKey!.Parts[i].KeyReference;
</text>
            }
            else
            {
                 <text>                       return _owner.@Model.PrimaryKey!.Parts[i].Property;
</text>
            }
</text>
        }
    }
                    default:
                        return base[name];
                }
            }
            set
            {
                if (!_owner.IsUnderConstruction)
                {
                    throw new @nameof(InvalidOperationException)@{}();
                }
                switch(name)
                {
    @for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
    {
        if(Model.PrimaryKey!.Parts[i].Property is {})
        {
            <text>                    case @Html.Raw($"\"{@Model.PrimaryKey!.Parts[i].Name}\""):
            @if(Model.PrimaryKey!.Parts[i].IsProperty)
            {
                <text>                        @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk value@{}@i = value as @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk;
                        if (value is null || value@{}@i is null)
                        {
                            throw new @nameof(InvalidCastException)@{}();
                        }   
                        _owner.@Model.PrimaryKey!.Parts[i].Property = (@Model.PrimaryKey!.Parts[i].Type)value@{}@i!;
                        break;
</text>
            }
            else
            {
                <text>                        @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk value@{}@i = value as @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk;
                        if (value is null || value@{}@i is null)
                        {
                            throw new @nameof(InvalidCastException)@{}();
                        }
                        ((@Model.PrimaryKey!.Parts[i].PrimaryKeyClassName)_owner.@Model.PrimaryKey!.Parts[i].Property).@Model.PrimaryKey!.Parts[i].KeyReference = (@Model.PrimaryKey!.Parts[i].Type)value@{}@i!;
                        break;
</text>
            }
</text>
        }
    }
                    default:
                        base[name] = value;
                        break;
                }
            }
        }
    @foreach (PrimaryKeyPartModel pkpm in Model.PrimaryKey!.Parts.Where(p => p.KeyReference is {}))
    {
        <text>        public override @Html.Raw(pkpm.Type)? @pkpm.Name 
        {
            get
            {
        @if(!@pkpm.IsProperty)
        {
             <text>                       return ((@pkpm.PrimaryKeyClassName)_owner.@pkpm.Property).@pkpm.KeyReference;
</text>
        }
        else
        {
            <text>                       return _owner.@pkpm.Property;
</text>
        }
            }
            set
            {
                if (!_owner.IsUnderConstruction)
                {
                    throw new @nameof(InvalidCastException)@{}();
                }
        @if(pkpm.IsProperty)
        {
            <text>                @pkpm.Type@pkpm.AsTypeAsk value1 = value as @pkpm.Type@pkpm.AsTypeAsk;
                if (value is null || value1 is null)
                {
                    throw new @nameof(InvalidCastException)@{}();
                }
                _owner.@pkpm.Property = (@pkpm.Type)value1!;
</text>
        }
        else
        {
            <text>                @pkpm.Type@pkpm.AsTypeAsk value1 = value as @pkpm.Type@pkpm.AsTypeAsk;
                if (value is null || value1 is null)
                {
                    throw new @nameof(InvalidCastException)@{}();
                }
                ((@pkpm.PrimaryKeyClassName)_owner.@pkpm.Property).@pkpm.KeyReference = (@pkpm.Type)value1!;
</text>
        }
            }
        }
</text>
    }
        
        public override bool IsAssigned 
        {
            get
            {
                return @for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
    {       
        if(Model.PrimaryKey!.Parts[i].Property is {})
        {
                <text>s_@{}@Model.PrimaryKey!.Parts[@i].PropertyName@{}Property.GetAccess(_owner) is not @nameof(PropertyAccessMode).@nameof(PropertyAccessMode.Denied) 
                    && </text>
        }
    }base.IsAssigned;
            }
        }
        
        internal PrimaryKeyClass(@Model.ClassName owner)
        {
            _owner = owner;
        }
    }
    #endregion PrimaryKey  
</text>
}

    #region Property classes
@foreach(PropertyModel pm in Model.Properties)
{
    <text>    public class @pm.PropertyClass: IProperty
    {
        public string Name => @(!string.IsNullOrEmpty(pm.Name) ? Html.Raw($"\"{pm.Name}\"") : "string.Empty");
        public Type Type => typeof(@Html.Raw(pm.ObjectType));
        public bool IsNullable => @pm.IsNullable.ToString().ToLower();
        public bool IsReadOnly => @pm.IsReadOnly.ToString().ToLower();
        public bool IsPoco => @pm.IsPoco.ToString().ToLower();
        public bool IsEntity => @pm.IsEntity.ToString().ToLower();
        public bool IsList => @pm.IsList.ToString().ToLower();
        public Type? ItemType => @(pm.ItemObjectType is { } ? Html.Raw($"typeof({pm.ItemObjectType})") : "null");
        public void SetValue(object target, object? value)
        {
    @if(string.IsNullOrEmpty(pm.Name))
    {
        <text>            throw new @nameof(InvalidOperationException)@{}();
</text>
    }
    else
    {
        <text>            @Html.Raw(pm.ObjectType)? value1 = value as @Html.Raw(pm.ObjectType)@pm.AsTypeAsk;
            if (value is {} && value1 is null@{}@if(!pm.IsNullable){<text> || value is null</text>})
            {
                throw new @nameof(InvalidCastException)@{}();
            }
            ((@Model.ClassName)target).@pm.Name = @if(!pm.IsNullable && !string.IsNullOrEmpty(pm.AsTypeAsk)){<text>(@Html.Raw(pm.ObjectType))</text>}value1@{}@if(!pm.IsNullable){<text>!</text>};
</text>
    }
        }
        public object? GetValue(object target)
        {
    @if(string.IsNullOrEmpty(pm.Name))
    {
        <text>            throw new @nameof(InvalidOperationException)@{}();
</text>
    }
    else
    {
        <text>            return ((@Model.ClassName)target).@pm.Name;
</text>
    }
        }
        public PropertyAccessMode GetAccess(object target)
        {
    @if(string.IsNullOrEmpty(pm.Name))
    {
        <text>            throw new @nameof(InvalidOperationException)@{}();
</text>
    }
    else
    {
        <text>            return target is @Model.ClassName target1 ? target1.@pm.AccessModeFieldName : @nameof(PropertyAccessMode).@nameof(PropertyAccessMode.Denied);
</text>
    }
        }
        public void SetAccess(object target, PropertyAccessMode mode)
        {
    @if(string.IsNullOrEmpty(pm.Name))
    {
        <text>            throw new @nameof(InvalidOperationException)@{}();
</text>
    }
    else
    {
        <text>            if(target is @Model.ClassName target1)
            {
                target1.@pm.AccessModeFieldName  = mode;
            }
</text>
    }
        }
    }
</text>
}
    #endregion Property classes

    #region Property fields
@foreach (PropertyModel pm in Model.Properties)
{
    <text>    public static @pm.PropertyClass @pm.PropertyField = new();
</text>
}
    #endregion Property fields

    #region fields
@foreach (PropertyModel pm in Model.Properties.Where(p => !string.IsNullOrEmpty(p.Name)))
{
    <text>    private@{}@pm.FieldReadOnly @Html.Raw(pm.ObjectType)@pm.NullableSuffix @pm.FieldName@if(pm.CanBeNull && (!pm.IsList ||!pm.IsReadOnly)){<text> = null@{}@if(!pm.IsNullable){<text>!</text>}</text>};
    @if(pm.IsList && pm.IsPoco)
    {
        <text>    private@{}@pm.FieldReadOnly @Html.Raw(pm.Type)@pm.NullableSuffix @pm.ProxyFieldName@if(pm.CanBeNull && (!pm.IsList ||!pm.IsReadOnly)){<text> = null@{}@if(!pm.IsNullable){<text>!</text>}</text>};
</text>    
    }
    private PropertyAccessMode @pm.AccessModeFieldName = @nameof(PropertyAccessMode).@nameof(PropertyAccessMode.Denied);
</text>    
}
    #endregion fields

@if(Model.PrimaryKey is { })
{
    <text>    private readonly PrimaryKeyClass _primaryKey;
    public override IPrimaryKey PrimaryKey => _primaryKey;
</text>
    
}

    public @Model.ClassName@{}(IServiceProvider services) : base(services)
    {
@foreach (PropertyModel pm in Model.Properties.Where(p => !string.IsNullOrEmpty(p.Name) && p.IsReadOnly && p.IsList))
{
    <text>        @pm.FieldName = new();
    @if(pm.IsPoco)
    {
        <text>        @pm.ProxyFieldName = new ListProxy@{}@Html.Raw($"<{pm.ItemObjectType}, {pm.ItemType}>")@{}(@pm.FieldName);
</text>
    }
</text>    
}
@if(Model.PrimaryKey is { })
{
    <text>        _primaryKey = new(this);
</text>
}
    }

    #region properties
@foreach (PropertyModel pm in Model.Properties.Where(p => !string.IsNullOrEmpty(p.Name)))
{
    <text>    public @Html.Raw(pm.ObjectType)@{}@pm.NullableSuffix @pm.Name
    {
        get
        {
            if(@pm.AccessModeFieldName is @nameof(PropertyAccessMode).@nameof(PropertyAccessMode.Denied))
            {
                throw new @nameof(InvalidOperationException)@{}(s_noAccess);
            }
            return @pm.FieldName;
        }
    @if(!pm.IsReadOnly || !pm.IsList)
    {
        <text>        set
        {
            if(!IsUnderConstruction && @pm.AccessModeFieldName is not @nameof(PropertyAccessMode).@nameof(PropertyAccessMode.Full))
            {
                throw new @nameof(InvalidOperationException)@{}(s_noAccess);
            }
            @pm.AccessModeFieldName = @nameof(PropertyAccessMode).@{}@if(pm.IsReadOnly){<text>@nameof(PropertyAccessMode.ReadOnly)</text>} else {<text>@nameof(PropertyAccessMode.Full)</text>};
            @pm.FieldName = value;
            @if(pm.IsList && pm.IsPoco)
            {
                <text>            @pm.ProxyFieldName = new ListProxy@{}@Html.Raw($"<{pm.ItemObjectType}, {pm.ItemType}>")@{}(@pm.FieldName);
</text>
            }
        }
</text>
    }
    }
    @Html.Raw($"{pm.Type}{pm.NullableSuffix}") @Html.Raw(Model.Interfaces[1]).@pm.Name
    {
        get
        {
            return @if(pm.IsList && pm.IsPoco){<text>@pm.ProxyFieldName</text>} else {<text>@pm.Name</text>};
        }
    @if(!pm.IsReadOnly)
    {
        <text>       set
        {
        @if(pm.IsPoco)
        {
            @if(pm.IsList)
            {
            <text>            @pm.ProxyFieldName = value;
            @pm.FieldName = new ListProxy@{}@Html.Raw($"<{pm.ItemType}, {pm.ItemObjectType}>")@{}(@pm.ProxyFieldName);
</text>
            }
            else{
            <text>            @pm.Name = (value as @Html.Raw(pm.ObjectType))!;
</text>
            }
        }
        else
        {
            <text>            @pm.Name = value;
</text>
        }
        }
</text>
    }
    }
</text>    
}
    #endregion properties
}