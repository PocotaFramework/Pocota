@page
@using Net.Leksi.Pocota.Common;
@model ClassModel

@Html.Partial("Header", Model)

public class @Model.ClassName : @Html.Raw(string.Join(", ", Model.Interfaces))
{
@foreach (PrimaryKeyPartModel pkpm in Model.PrimaryKey!.Parts)
{
    <text>    private @Html.Raw(@pkpm.Type)? @pkpm.FieldName = null;
</text>
}
    private static readonly IList@{}@Html.Raw("<KeyDefinition>") _definitions = new List@{}@Html.Raw("<KeyDefinition>")@{}()
    {
@foreach (PrimaryKeyPartModel pkpm in Model.PrimaryKey!.Parts)
{
    <text>        new() {Name = @Html.Raw($"\"{@pkpm.Name}\""), Type = typeof(@Html.Raw(pkpm.Type)), Property = @if (pkpm.PropertyName is { }) {
        <text>@Html.Raw($"\"{@pkpm.PropertyName}\"")</text>
    } else {<text>null</text>}, KeyReference = @if (pkpm.KeyReference is { }) {
        <text>@Html.Raw($"\"{@pkpm.KeyReference}\"")</text>} else {<text>null</text>}},
</text>
}
    }.AsReadOnly();

    public virtual object? this[int index]
    {
        get
        {
            switch(index)
            {
@for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
{
    <text>                case @i:
                    return @Model.PrimaryKey!.Parts[i].FieldName;
</text>
}
                default:
                    throw new IndexOutOfRangeException();
            }
        }
        set
        {
            switch(index)
            {
@for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
{
    <text>                case @i:
                    @Model.PrimaryKey!.Parts[i].FieldName = value as @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk;
                    if(value is {} && @Model.PrimaryKey!.Parts[i].FieldName is null)
                    {
                        throw new InvalidCastException();
                    }
                    break;
</text>
}
                default:
                    throw new IndexOutOfRangeException();
            }
        }
    }
    public virtual object? this[string name]
    {
        get
        {
            switch(name)
            {
@for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
{
    <text>                case @Html.Raw($"\"{@Model.PrimaryKey!.Parts[i].Name}\""):
                    return @Model.PrimaryKey!.Parts[i].FieldName;
</text>
}
                default:
                    throw new IndexOutOfRangeException();
            }
        }
        set
        {
            switch(name)
            {
@for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
{
    <text>                case @Html.Raw($"\"{@Model.PrimaryKey!.Parts[i].Name}\""):
                    @Model.PrimaryKey!.Parts[i].FieldName = value as @Model.PrimaryKey!.Parts[i].Type@Model.PrimaryKey!.Parts[i].AsTypeAsk;
                    if(value is {} && @Model.PrimaryKey!.Parts[i].FieldName is null)
                    {
                        throw new InvalidCastException();
                    }
                    break;
</text>
}
                default:
                    throw new IndexOutOfRangeException();
            }
        }
    }
    public IList@{}@Html.Raw("<KeyDefinition>") Definitions => _definitions;
    public int Count => _definitions.Count;
    public bool IsAssigned => _definitions.Select(def => this[def.Name] is { }).All(e => e);

@foreach (PrimaryKeyPartModel pkpm in Model.PrimaryKey!.Parts)
{
    <text>    public virtual @Html.Raw(pkpm.Type)? @pkpm.Name 
    {
        get => @pkpm.FieldName;
        set
        {
            @pkpm.FieldName = value as @pkpm.Type@pkpm.AsTypeAsk;
            if(value is {} && @pkpm.FieldName is null)
            {
                throw new InvalidCastException();
            }
        }
    }
</text>
}
    public object?[] ToArray()
    {
        return new object?[] 
        {
@for (int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
{
    <text>            this[@i],
</text>
}
        };
    }
}