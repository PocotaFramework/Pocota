@page
@using Net.Leksi.Pocota.Common;
@using Net.Leksi.Pocota.Common.Generic;
@using Net.Leksi.Pocota.Server;
@model ClassModel

@Html.Partial("Header", Model)

public class @Model.ClassName: @Html.Raw(string.Join(", ", Model.Interfaces))
{
#region Property classes

@foreach(PropertyModel pm in Model.Properties)
{
    <text>    public class @pm.PropertyClass: I@{}@if(Model.PocoKind is PocoKind.Entity){<text>Entity</text>}Property
    {
        public string Name => @if(string.IsNullOrEmpty(@pm.Name)){<text>string.Empty</text>}else{<text>"@pm.Name"</text>};

        public Type Type => typeof(@Html.Raw(pm.Type));
            
        public Type? Owner => @if ("null".Equals(pm.Owner)){<text>null</text>}else{<text>typeof(@Html.Raw(pm.Owner))</text>};

        public bool IsNullable => @if(!string.IsNullOrEmpty(pm.Nullable)){<text>true</text>}else{<text>false</text>};

        public bool IsReadonly => @if(pm.IsReadonly){<text>true</text>}else{<text>false</text>};

        public PocoKind PocoKind => @nameof(PocoKind)@{}.@pm.PocoKind;

        public bool IsCollection => @if(pm.IsReadonly){<text>true</text>}else{<text>false</text>};

        public Type? ItemType => @if(pm.ItemType is null){<text>null</text>}else{<text>typeof(@Html.Raw(pm.ItemType))</text>};

        public object? GetValue(object target)
        {
            if(target is @Model.ClassName obj)
            {
                return obj@{}@if(!string.IsNullOrEmpty(pm.Name)){<text>.Get@{}@pm.Name@{}()</text>};
            }
            throw new @nameof(ArgumentException)@{}(string.Format(s_invalidTarget, target is null ? "null" : target.GetType(), typeof(@Model.ClassName)));
        }

        public bool IsSet(object target)
        {
            if(target is @Model.ClassName obj)
            {
                return @if(!string.IsNullOrEmpty(pm.Name)){<text>obj.@pm.FieldName@{}IsSet</text>}else{<text>true</text>};
            }
            throw new @nameof(ArgumentException)@{}(string.Format(s_invalidTarget, target is null ? "null" : target.GetType(), typeof(@Model.ClassName)));
        }

        public void SetValue(object target, object? value)
        {
            if(target is @Model.ClassName obj)
            {
                if(value is @Html.Raw(pm.Type)@if(!string.IsNullOrEmpty(pm.Nullable)){<text> || value is null</text>})
                {
@if(!string.IsNullOrEmpty(pm.Name))
{
    <text>                    obj.Set@{}@pm.Name@{}((@Html.Raw(pm.Type)@pm.Nullable)value);
</text>
}
                }
                else
                {
                    throw new @nameof(ArgumentException)@{}(string.Format(s_invalidValue, value is null ? "null" : value.GetType(), typeof(@Html.Raw(pm.Type))));
                }
            }
            else
            {
                throw new @nameof(ArgumentException)@{}(string.Format(s_invalidTarget, target is null ? "null" : target.GetType(), typeof(@Model.ClassName)));
            }
        }
    @if(Model.PocoKind is PocoKind.Entity)
    {
        <text>        public @nameof(AccessMode) GetAccess(object target)
        {
            if(target is @Model.ClassName obj)
            {
                return obj.@if(!string.IsNullOrEmpty(pm.Name)){<text>@pm.FieldName@{}AccessMode</text>}else{<text>_accessMode</text>};
            }
            throw new @nameof(ArgumentException)@{}(string.Format(s_invalidTarget, target is null ? "null" : target.GetType(), typeof(@Model.ClassName)));
        }

        public void SetAccess(object target, @nameof(AccessMode) value)
        {
            if(target is @Model.ClassName obj)
            {
                if(!obj._isAccessChecking){
                    throw new @nameof(ArgumentException)@{}(s_cannotSetAccess);
                }
                obj.@if(!string.IsNullOrEmpty(pm.Name)){<text>@pm.FieldName@{}AccessMode</text>}else{<text>_accessMode</text>} = value;
            }
            throw new @nameof(ArgumentException)@{}(string.Format(s_invalidTarget, target is null ? "null" : target.GetType(), typeof(@Model.ClassName)));
        }
</text>
    }
    }
</text>
}

#endregion Property classes

    private const string s_alreadyDelivered = "The property {0}.{1} is already delivered!";
    private const string s_accessAlreadyChecked = "The access to {0} is already checked!";
    private const string s_isNotSet = "The property {0}.{1} is not set!";
    private const string s_invalidTarget = "Invalid target: {0}, {1} expected!";
    private const string s_invalidValue = "Invalid value: {0}, {1} expected!";
    private const string s_cannotSetAccess = "Cannot set access mode at this point!";
#region Property fields
@foreach (PropertyModel pm in Model.Properties)
{
    <text>    private static @pm.PropertyClass @pm.PropertyField = new();
</text>
}
#endregion Property fields
#region Fields
    private readonly @nameof(IServiceProvider) _serviceProvider;
@if (Model.PocoKind is PocoKind.Entity)
{
    <text>
    private @nameof(AccessMode) _accessMode = @nameof(AccessMode).@nameof(AccessMode.Full);
    private bool _isAccessChecked = false;
    protected internal bool _isAccessChecking = false;
</text>
}
@foreach(PropertyModel pm in Model.Properties)
{
    <text>    private @Html.Raw(pm.Type)@pm.Nullable @pm.FieldName = @if(pm.IsClass || pm.PocoKind is not PocoKind.NotAPoco || pm.IsCollection || !string.IsNullOrEmpty(@pm.Nullable))
    {
        <text>null@{}@if(string.IsNullOrEmpty(@pm.Nullable)){<text>!</text>}</text>
    } 
    else 
    {
        <text>default</text>
    };
    @if (Model.PocoKind is PocoKind.Entity)
    {
        <text>    private @nameof(AccessMode) @pm.FieldName@{}AccessMode = @nameof(AccessMode).@nameof(AccessMode.Full);
</text>
    }
    private bool @pm.FieldName@{}IsSet = false;
    private bool @pm.FieldName@{}IsDelivered = false;
</text>
}
#endregion Fields
#region Properties
@if (Model.PocoKind is PocoKind.Entity)
{
    <text>    protected bool IsAccessChecked => _isAccessChecked;
</text>
}
@if (Model.PocoKind is PocoKind.Entity)
{
    <text>    @nameof(AccessMode) @nameof(IEntity)@{}.AccessMode
    {
        get  => _accessMode;
        set 
        {
            if(!_isAccessChecking){
                throw new @nameof(InvalidOperationException)@{}(s_cannotSetAccess);
            }
            _accessMode = value;
        }
    }  
    int @nameof(IPrimaryKey)@{}.Count => @Model.PrimaryKey!.Parts.Count;

    object? @nameof(IPrimaryKey)@{}.this[int index] => index switch
    {
    @for(int i = 0; i < Model.PrimaryKey!.Parts.Count; ++i)
    {
        <text>        @i => @Model.PrimaryKey!.Parts[i],
</text>
    }
        _ => throw new @nameof(IndexOutOfRangeException)@{}()
    };

    bool @nameof(IPrimaryKey)@{}.IsAssigned => this.All(p => p is {});

    void @nameof(IEntity)@{}.EnsureAccessSelectors()
    {
        throw new @nameof(NotImplementedException)@{}();
    }
</text>
}
   
@foreach(PropertyModel pm in Model.Properties.Where(p => !string.IsNullOrEmpty(p.Name)))
{
    <text>    public override @Html.Raw(pm.Type)@pm.Nullable @pm.Name 
    {
        get => Get@{}@pm.Name@{}();
    @if(!pm.IsReadonly)
    {
        <text>        set => Set@{}@pm.Name@{}(value);
</text>
    }
    }
</text>
}
#endregion Properties
    public @Model.ClassName (@nameof(IServiceProvider) serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }
#region Methods
@if(Model.PocoKind is PocoKind.Entity)
{
    <text>    void @nameof(IEntity)@{}.CheckAccess()
    {
        if(!_isAccessChecked)
        {
            try 
            {
                _isAccessChecking = true;
    @if(Model.AccessProperties.Any())
    {
        <text>                if(@string.Join(" || ", Model.AccessProperties.Select(p => $"!{p.FieldName}IsSet")))
                {
                    throw new @nameof(InvalidOperationException)@{}("Not all access properties are set!");
                }
</text>
    }

        @foreach (PropertyModel ap in Model.AccessProperties.Where(p => p.PocoKind is PocoKind.Entity))
        {
            @if(ap.IsCollection)
            {
                <text>                foreach(@Html.Raw(ap.ItemType) item in @ap.FieldName@{})
                {
                    ((@nameof(IEntity))item).CheckAccess();
                }
</text>
            }
            else
            {
                <text>                ((@nameof(IEntity))@ap.FieldName).CheckAccess();
</text>
            }
        }
                _serviceProvider.GetRequiredService@{}@Html.Raw($"<{nameof(IAccessManager<object>)}<{Model.Class}>>")@{}().CheckAccess(this);
                _isAccessChecked = true;
            }
            finally
            {
                _isAccessChecking = false;
            }
        }
    }
    IEnumerator<object?> IEnumerable<object?>.GetEnumerator()
    {
        for (int i = 0; i @Html.Raw("<") ((IPrimaryKey)this).Count; ++i)
        {
            yield return ((IPrimaryKey)this)[i];
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        for (int i = 0; i @Html.Raw("<") ((IPrimaryKey)this).Count; ++i)
        {
            yield return ((IPrimaryKey)this)[i];
        }
    }

</text>
}
@foreach(PropertyModel pm in Model.Properties.Where(p => !string.IsNullOrEmpty(p.Name)))
{
    <text>    private void Set@{}@pm.Name@{}(@Html.Raw(pm.Type)@pm.Nullable value)
    {
    @if(string.IsNullOrEmpty(@pm.Nullable) && pm.IsClass)
    {
        <text>        if(value is null)
        {
            throw new @nameof(ArgumentNullException)@{}(nameof(@pm.Name));
        }
</text>
    }
        if(@pm.FieldName@{}IsDelivered)
        {
            throw new @nameof(InvalidOperationException)@{}(string.Format(s_alreadyDelivered, typeof(@Model.ClassName), nameof(@pm.Name)));
        }
    @if(Model.PocoKind is PocoKind.Entity)
    {
        <text>        if(IsAccessChecked)
        {
            throw new @nameof(InvalidOperationException)@{}(string.Format(s_accessAlreadyChecked, typeof(@Model.ClassName)));
        }
</text>
    }
        if(value != @pm.FieldName)
        {
            @pm.FieldName = value @if(string.IsNullOrEmpty(@pm.Nullable) && pm.IsClass){<text>!</text>};
            @pm.FieldName@{}IsSet = true;
        }
    }
    @if(pm.IsAccess && !pm.IsCollection && pm.PocoKind is PocoKind.Entity)
    {
        <text>    private void @pm.Name@{}Changed@{}()
    {
        _isAccessChecked = false;
    }
</text>
    }
    private @Html.Raw(pm.Type)@pm.Nullable Get@{}@pm.Name@{}()
    {
        if(!@pm.FieldName@{}IsSet)
        {
            throw new @nameof(InvalidOperationException)@{}(string.Format(s_isNotSet, typeof(@Model.ClassName), nameof(@pm.Name)));
        }
        return @pm.FieldName;
    }
</text>
}
#endregion Methods

}