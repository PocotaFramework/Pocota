@page
@using Net.Leksi.Pocota.Common
@using Net.Leksi.Pocota.Server;
@model ClassModel
@Html.Partial("Header", Model)

#region DataProviderFactoryInterface
@foreach (MethodModel mm in Model.Methods)
{
    <text>public interface @mm.DataProviderFactoryInterface: @nameof(IDataProviderFactory)
{
    @nameof(DataProvider) Create(@for(int i = 0; i < mm.Filters.Count; ++i)
    {
        if(i > 0)
        {
            <text>, </text>
        }
        <text>@Html.Raw(mm.Filters[i].Type) @mm.Filters[i].Name</text>
    });
}

</text>
}
#endregion DataProviderFactoryInterface

#region DefaultDataProviderFactory
@foreach (MethodModel mm in Model.Methods)
{
    <text>public class @mm.DefaultDataProviderFactoryName: @mm.DataProviderFactoryInterface
{
    public @Html.Raw(nameof(DataProvider)) Create(@for(int i = 0; i < mm.Filters.Count; ++i)
    {
        if(i > 0)
        {
            <text>, </text>
        }
        <text>@Html.Raw(mm.Filters[i].Type) @mm.Filters[i].Name</text>
    })
    {
        return new @Html.Raw(nameof(DataProviderStub))@{}();
    }
}

</text>
}
#endregion DefaultDataProviderFactory

#region ProcessorFactoryInterface
@foreach (MethodModel mm in Model.Methods)
{
    <text>public interface @mm.ProcessorFactoryInterface: @nameof(IProcessorFactory)
    {
        @Html.Raw(mm.ProcessorInterface) Create(@for (int i = 0; i < mm.Filters.Count; ++i)
        {
            if (i > 0)
            {
                <text>, </text>
            }
            <text>@Html.Raw(mm.Filters[i].Type) @mm.Filters[i].Name</text>
        });
    }

</text>
}
#endregion ProcessorFactoryInterface

#region DefaultProcessorFactory
@foreach (MethodModel mm in Model.Methods)
{
    <text>public class @mm.DefaultProcessorFactoryName: @mm.ProcessorFactoryInterface
{
    public @Html.Raw(mm.ProcessorInterface) Create(@for(int i = 0; i < mm.Filters.Count; ++i)
    {
        if(i > 0)
        {
            <text>, </text>
        }
        <text>@Html.Raw(mm.Filters[i].Type) @mm.Filters[i].Name</text>
    })
    {
        return new @Html.Raw($"FarNienteProcessor<{mm.OutputItemType}>")@{}();
    }
}

</text>
}
#endregion DefaultProcessorFactory

public class @Model.ClassName : @Html.Raw(string.Join(", ", Model.Interfaces))
{
#region PropertyUse
@foreach (MethodModel mm in Model.Methods)
{
    if(mm.PropertyUseVariable is {})
    {
        <text>    private static readonly PropertyUse @mm.PropertyUseVariable = @Html.Partial("PropertyUse", mm.PropertyUse);
</text>
    }
}
#endregion PropertyUse

#region RequestHandler
@foreach (MethodModel mm in Model.Methods)
{
    foreach(AttributeModel am in mm.Attributes)
    {
        <text>    [@Html.Raw(am.ToString())]
</text>
    }
    <text>    public @mm.ReturnType @mm.Name@{}(@Html.Raw(string.Join(", ", mm.Parameters.Select(v => $"{v.Type} {v.Name}")))) 
    {
        IPocoContext @mm.PocoContextVariable = HttpContext.RequestServices.GetRequiredService<IPocoContext>();
        @mm.PocoContextVariable@{}.ControllerContext = ControllerContext;
    @if(mm.Filters.Count > 0)
    {
        foreach(FilterModel fm in mm.Filters)
        {
            <text>        @fm.Type @fm.Variable = default!;
</text>
        }
        foreach(FilterModel fm in mm.Filters.Where(v => !v.IsConvertible))
        {
            <text>        if (@fm.Name is { })
        {
            @fm.Variable = JsonSerializer.Deserialize<@fm.Type>(HttpUtility.UrlDecode(@fm.Name), @mm.PocoContextVariable@{}.JsonSerializerOptions)@if (!fm.IsNullable) {<text>!</text>};
        }
</text>
        }
        foreach(FilterModel fm in mm.Filters.Where(v => v.IsConvertible))
        {
            <text>        @fm.Variable = @if (fm.IsNullable) {<text> @fm.Name is null
                    ? null
                    : </text>}(@fm.Type)Convert.ChangeType(@fm.Name,typeof(@fm.Type));
</text>
        }
    }
    @if(mm.IsListOutput)
    {
        <text>        JsonSerializer.Serialize(
            new Utf8JsonWriter(HttpContext.Response.Body),
            HttpContext.RequestServices.GetRequiredService<@mm.ProcessorFactoryInterface>().Create(@string.Join(", ", mm.CallParameters)).ProcessEnumerable(
                @mm.PocoContextVariable@{}.Build<@mm.OutputItemType>(@mm.PropertyUseVariable, HttpContext.RequestServices.GetRequiredService<@mm.DataProviderFactoryInterface>().Create(@string.Join(", ", mm.CallParameters)), false)
            ).Select(v => @mm.PocoContextVariable@{}.ConfirmAccess(v)),
            @mm.PocoContextVariable@{}.JsonSerializerOptions
        );
</text>
    }
    else
    {
                <text>
                    IEnumerator<@mm.OutputItemType>
                        en = @mm.PocoContextVariable@{
                        }.Build<@mm.OutputItemType>
                            (@mm.PropertyUseVariable, HttpContext.RequestServices.GetRequiredService<@mm.DataProviderFactoryInterface>
                                ().Create(@string.Join(", ", mm.CallParameters)), true).GetEnumerator();
        if(en.MoveNext())
        {
            JsonSerializer.Serialize(
                new Utf8JsonWriter(HttpContext.Response.Body),
                @mm.PocoContextVariable@{}.ConfirmAccess(
                    HttpContext.RequestServices.GetRequiredService<@mm.ProcessorFactoryInterface>().Create(@string.Join(", ", mm.CallParameters)).ProcessSingle(en.Current)
                ),
                @mm.PocoContextVariable@{}.JsonSerializerOptions
            );
        }
</text>
    }
    }

</text>
}
    [@Html.Raw(Model.UpdateRouteAttribute!.ToString())]
    public override void Update()
    {
        base.Update();
    }
#endregion RequestHandler
}
