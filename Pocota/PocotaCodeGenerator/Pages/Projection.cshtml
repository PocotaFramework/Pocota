@using Net.Leksi.Pocota.Common;
@model ClassModel

    public class @Model.ClassName: @Html.Raw(string.Join(", ", Model.Interfaces))
    {
        @foreach(PropertyModel pm in Model.Properties.Where(p => p.IsList && p.IsProjection))
        {
            string fieldName = $"_{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}";
            <text>        private readonly @Html.Raw($"ProjectionList<{pm.Class},{pm.ItemType}> {fieldName};")
</text>
        }

        public @Model.Parent!.ClassName Projector  { get; init; }

        @foreach(PropertyModel pm in Model.Properties)
        {
            <text>        public @Html.Raw(pm.Type)@if (pm.IsNullable) {<text>?</text> } @pm.Name 
        {
            get => @if(!pm.IsList || !pm.IsProjection){
                <text>@if (pm.IsProjection && !pm.IsList) {<text>@Html.Raw($"((IProjector{(pm.IsNullable ? "?" : string.Empty)})")</text>}@Html.Raw($"Projector.{pm.Name}")@if (pm.IsProjection && !pm.IsList) { <text>)@if (pm.IsNullable) {<text>?</text> }@Html.Raw($".As<{pm.Type}>()")</text>}@if (!pm.IsNullable) {<text>!</text> };
</text>
            }
            else {
                string fieldName = $"_{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}";
                <text>@fieldName;
</text>
            }
            @if(!pm.IsReadOnly)
            {
                if(pm.IsList)
                {
                    <text>            set => throw new NotImplementedException();
</text>
                }
                else
                {
                    <text>            set => @Html.Raw($"Projector.{pm.Name} = ")@if (pm.IsProjection) { <text>@Html.Raw($"({pm.Class}{(pm.IsNullable ? "?" : string.Empty)})")</text> }value;
</text>
                }
            }
        }

</text>
        }

        internal @Html.Raw($"{Model.ClassName}({Model.Parent!.ClassName} projector)")
        {
            Projector = projector;
            @foreach(PropertyModel pm in Model.Properties.Where(p => p.IsList && p.IsProjection))
            {
                string fieldName = $"_{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}";
                <text>            @fieldName = new(@Html.Raw($"Projector.{pm.Name}"));
</text>
            }
        }

        public I As<I>()
        {
            return (I)Projector.As(typeof(I))!;
        }

        public object? As(Type type) 
        {
            return Projector.As(type);
        }

        @foreach(MethodModel mm in Model.Methods)
        {
        string parameters = string.Join(", ", mm.Parameters.Select(p => p.Class is { } ? $"((IProjection<{p.Class}>){p.Name})?.Projector!" : p.Name));
        <text>        public @Html.Raw(mm.ReturnType) @mm.Name@Html.Raw($"({string.Join(", ", mm.Parameters.Select(p => $"{p.Type} {p.Name}"))})")
        {
            @Html.Raw("")@if (!mm.ReturnType.Equals("void"))
            {
                <text>object? result = </text>
            }@Html.Raw($"Projector.{mm.Name}({parameters})");
            @if (!mm.ReturnType.Equals("void"))
            {
                <text>            return @Html.Raw($"({mm.ReturnType})result");
</text>
            }
        }
</text>
        }



    }
