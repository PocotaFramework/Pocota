@using Net.Leksi.Pocota.Common;
@model ClassModel
@{
    string indent = ViewData.ContainsKey("Projection") ? "    " : string.Empty;
    bool hasProjector = ViewData.ContainsKey("Projection");
    int position = 0;
}

@Html.Raw("#region Init Properties")

@foreach (PropertyModel pm in Model.Properties)
{
    string fieldName = $"_{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}";
    <text>    @Html.Raw(indent)public class @Html.Raw($"{pm.Name}Property"): @if(!Model.IsClient){<text>I</text>}Property
    @Html.Raw(indent){
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}string Name => "@pm.Name";
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}bool IsReadOnly => @Html.Raw(pm.IsReadOnly ? "true" : "false");
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}bool IsNullable => @Html.Raw(pm.IsNullable ? "true" : "false");
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}bool IsCollection =>  @Html.Raw(pm.IsList ? "true" : "false");
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}bool IsPoco =>  @Html.Raw(pm.IsPoco && !pm.IsList ? "true" : "false");
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}bool IsEntity => @Html.Raw(pm.IsEntity && !pm.IsList ? "true" : "false");
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}bool IsKeyPart => @Html.Raw(pm.IsKeyPart ? "true" : "false");
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}Type Type => typeof(@Html.Raw(pm.Type));
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}Type? ItemType => @Html.Raw(pm.ItemType is {} ? $"typeof({pm.ItemType})" : "null");
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}bool IsSet(object target) => @if(Model.IsEntity)
        {
            <text>@Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.{(Model.IsClient ? $"Is{pm.Name}Set()" : $"_is_set{fieldName}")}")</text>
        }
        else
        {
            <text>true</text>
        };
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}object? Get(object target) => @Html.Raw($"(({Model.ClassName})target).{pm.Name}");
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}void Touch(object target) @if(Model.IsEntity)
        {
            <text>=> @Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}._is_set{fieldName} = true");
</text>
        }
        else
        {
            <text>
        @Html.Raw(indent){ }
</text>
        }
        @Html.Raw(indent)public @if(Model.IsClient){<text>override </text>}void Set(object target, object? value) => @if(!pm.IsList)
            {
                if(pm.IsReadOnly)
                {
                    if(pm.IsPoco)
                    {
                    <text>@Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.Set{pm.Name}(((IProjection?)value)?.As<{(hasProjector ? pm.Class : pm.Type)}>()!)")</text>
                    }
                    else
                    {
                        <text>@Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.Set{pm.Name}(({pm.Type})value!)")</text>
                    }
                }
                else
                {
                    if(pm.IsPoco)
                    {
                        <text>@Html.Raw($"(({Model.ClassName})target).Set{pm.Name}(((IProjection?)value)?.As<{pm.Type}>()!)")</text>
                    }
                    else
                    {
                        <text>@Html.Raw($"(({Model.ClassName})target).Set{pm.Name}(({pm.Type})value!)")</text>
                    }
                }
            }
            else 
            {
                <text>throw new NotImplementedException()</text>
            };
        @if(Model.IsClient)
        {
            <text>        @Html.Raw(indent)public override bool IsModified(object target) => @Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.Is{pm.Name}Modified()");
        @Html.Raw(indent)public override bool IsInitial(object target) => @Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.Is{pm.Name}Initial()");
        @Html.Raw(indent)public override void CancelChange(object target) => @Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.{pm.Name}CancelChange()");
        @Html.Raw(indent)public override void AcceptChange(object target) => @if(Model.IsEntity){<text>throw new InvalidOperationException()</text>} else {<text>@Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.{pm.Name}AcceptChange()")</text>};
        @Html.Raw(indent)public override object? GetInitial(object target) => @if (Model.IsEntity && pm.IsList)
        {
            <text>@Html.Raw($"IsSet(target) ? (({Model.ClassName})target){(pm.Class is {} ? string.Empty : $"{(hasProjector ? "._projector" : string.Empty)}")}._initial{fieldName} : default!")</text>
        }
        else
        {
            <text>@Html.Raw($"IsSet(target) ? (({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}._initial{fieldName} : default!")</text>
            @*<text>throw new InvalidOperationException()</text>*@
        };
</text>
        }
    @Html.Raw(indent)}

</text>
}    
    @Html.Raw(indent)public static void InitProperties(@Html.Raw("List<IProperty>") properties)
    @Html.Raw(indent){
        @foreach (PropertyModel pm in Model.Properties)
        {    
            <text>        @Html.Raw(indent)properties.Add(@Html.Raw($"new {pm.Name}Property()"));
</text>
        }
    @Html.Raw(indent)}

    @if(!hasProjector)
    {
        foreach (PropertyModel pm in Model.Properties)
        {    
            <text>   public static @Html.Raw($"{pm.Name}Property {pm.Name}Prop = new()");
</text>
        }
    }
@Html.Raw("#endregion Init Properties");
