@using Net.Leksi.Pocota.Common;
@model ClassModel
@{
    string indent = ViewData.ContainsKey("Projection") ? "    " : string.Empty;
    bool hasProjector = ViewData.ContainsKey("Projection");
}

@Html.Raw("#region Init Properties")

@foreach (PropertyModel pm in Model.Properties)
{
    string fieldName = $"_{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}";
    <text>    @Html.Raw(indent)public class @Html.Raw($"{pm.Name}Property"): IProperty
    @Html.Raw(indent){
        @Html.Raw(indent)public string Name => "@pm.Name";
        @Html.Raw(indent)public bool IsReadOnly => @Html.Raw(pm.IsReadOnly ? "true" : "false");
        @Html.Raw(indent)public bool IsNullable => @Html.Raw(pm.IsNullable ? "true" : "false");
        @Html.Raw(indent)public bool IsCollection =>  @Html.Raw(pm.IsList ? "true" : "false");
        @Html.Raw(indent)public Type Type => typeof(@Html.Raw(pm.Type));
        @Html.Raw(indent)public Type? ItemType => @Html.Raw(pm.ItemType is {} ? $"typeof({pm.ItemType})" : "null");
        @Html.Raw(indent)public bool IsSet(object target) =>  @Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.{(!pm.IsList ? $"_is_set{fieldName}" : $"{pm.Name}.IsSet")}");
        @Html.Raw(indent)public object? Get(object target)
        @Html.Raw(indent){
            @if (hasProjector)
            {
                if(!pm.IsList || !pm.IsProjection)
                {
                    <text>            @Html.Raw(indent)return @if (pm.IsProjection) {<text>@Html.Raw($"((IProjection{(pm.IsNullable ? "?" : string.Empty)})")</text>}@Html.Raw($"(({Model.ClassName})target)._projector.{pm.Name}")@if (pm.IsProjection) { <text>)@Html.Raw($"?.As<{pm.Type}>()")</text>}@if (!pm.IsNullable) {<text>!</text> };
</text>
                }
                else 
                {
                    <text>            @Html.Raw(indent)return @Html.Raw($"(({Model.ClassName})target).{fieldName}");
</text>
                }
            }
            else
            {
                <text>            @Html.Raw(indent)return @Html.Raw($"(({Model.ClassName})target).{pm.Name}");
</text>
            }
        @Html.Raw(indent)}
        @Html.Raw(indent)public void Touch(object target)
        @Html.Raw(indent){
            @Html.Raw(indent)@Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.Touch{pm.Name}()");
        @Html.Raw(indent)}
        @Html.Raw(indent)public void Set(object target, object? value)
        @Html.Raw(indent){
            @if(!pm.IsList)
            {
                if(pm.IsProjection)
                {
                <text>            @Html.Raw(indent)@Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.{pm.Name} = ((IProjection?)value)?.As<{(hasProjector ? pm.Class : pm.Type)}>()!");
</text>
                }
                else
                {
                <text>            @Html.Raw(indent)@Html.Raw($"(({Model.ClassName})target){(hasProjector ? "._projector" : string.Empty)}.{pm.Name} = ({pm.Type})value!");
</text>
                }
            }
        @Html.Raw(indent)}
    @Html.Raw(indent)}
</text>
}    
    @Html.Raw(indent)public static void InitProperties(@Html.Raw("List<IProperty>") properties)
    @Html.Raw(indent){
        @foreach (PropertyModel pm in Model.Properties)
        {    
            <text>        @Html.Raw(indent)properties.Add(@Html.Raw($"new {pm.Name}Property()"));
</text>
        }
    @Html.Raw(indent)}

    @if(!hasProjector)
    {
        foreach (PropertyModel pm in Model.Properties)
        {    
            <text>       internal static @Html.Raw($"{pm.Name}Property {pm.Name}Prop = new()");
</text>
        }
    }
@Html.Raw("#endregion Init Properties");
