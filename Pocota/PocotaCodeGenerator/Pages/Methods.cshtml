@using Net.Leksi.Pocota.Common;
@model ClassModel

@Html.Raw("#region Methods")
    public I? @Html.Raw("As<I>() where I : class")
    {
        return (I?)As(typeof(I));
    }

    public object? As(Type type)
    {
        @foreach (ClassModel model1 in Model.Classes)
        {
            <text>        if(type == typeof(@Html.Raw(model1.Interface)))
        {
            return @Html.Raw($"As{model1.ClassName}");
        }
</text>
        }
        if(type == typeof(@Html.Raw(Model.ClassName)))
        {
            return this;
        }
        if(type == typeof(IPoco))
        {
            return this;
        }
        if(type == typeof(PocoBase))
        {
            return this;
        }
        
        @if (Model.IsEntity)
        {
            <text>        if(type == typeof(IEntity))
        {
            return this;
        }
        if(type == typeof(EntityBase))
        {
            return this;
        }
</text>
        }
        else
        {
            <text>        if(type == typeof(EnvelopeBase))
        {
            return this;
        }
</text>
        }
        
        return null;
    }

    public override bool Equals(object? obj)
    {
        return obj is @Html.Raw(Model.ClassName) other && object.ReferenceEquals(this, other);
    }

    public override int GetHashCode()
    {
        return base.GetHashCode();
    }

    @foreach(PropertyModel pm in Model.Properties) 
    {
    <text>    public void @Html.Raw($"Touch{pm.Name}()")
    {
        @if (!pm.IsList)
        {
            <text>        _is_set_@Html.Raw($"{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}") = true;
</text>
        }
        else
        {
            <text>        @Html.Raw($"{pm.Name}.Touch()");
</text>
        }

    }
</text>
    }

    @foreach(MethodModel mm in Model.Methods)
    {
    <text>    public abstract @Html.Raw(mm.ReturnType) @mm.Name@Html.Raw($"({string.Join(", ", mm.Parameters.Select(p => $"{p.Type} {p.Name}"))})");
</text>
    }

    private void ProjectionCreated(Type @@interface, IProjection projection)
    {
        OnProjectionCreated(@@interface, projection);
    }

@Html.Raw("#endregion Methods");
