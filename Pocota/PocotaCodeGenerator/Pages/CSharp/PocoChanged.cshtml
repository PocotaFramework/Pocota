@using Net.Leksi.Pocota.Common;
@model ClassModel

@Html.Raw("#region Poco Changed")

@foreach (PropertyModel pm in Model.Properties.Where(p => p.IsPoco))
{
    string fieldName = $"_{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}";
    <text>    protected virtual void @Html.Raw(pm.Name)PocoChanged(object? sender, NotifyPocoChangedEventArgs e) => PropagateChangeEvent(e, nameof(@Html.Raw(pm.Name)));

</text>
}

@foreach (PropertyModel pm in Model.Properties)
{
    string fieldName = $"_{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}";
    if(pm.IsList)
    {
        <text>    protected virtual void @Html.Raw(pm.Name)CollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        lock(_lock)
        {
            if (e.OldItems is { })
            {
                foreach (@Html.Raw(pm.ItemType) item in e.OldItems)
                {
                @if (pm.IsPoco)
                {
                    <text>                    item.PocoChanged -= @Html.Raw($"{pm.Name}PocoChanged");
</text>
                }
                    if(IsBeingPopulated @if(Model.IsEntity){<text> || ((IEntity)this).PocoState is PocoState.Created</text>})
                    {
                        @Html.Raw($"_initial{fieldName}.Remove(item)");
                    }
                }
            }
            if (e.NewItems is { })
            {
                foreach (@Html.Raw(pm.ItemType) item in e.NewItems)
                {
                @if(Model.IsEntity)
                {
                    <text>                    if(IsBeingPopulated || @Html.Raw($"_is_set{fieldName}") || ((IEntity)this).PocoState is PocoState.Created)
                    {
</text>
                }
                @if (pm.IsPoco)
                {
                    <text>                    @Html.Raw(Model.IsEntity ? "    " : string.Empty)item.PocoChanged += @Html.Raw($"{pm.Name}PocoChanged");
</text>
                }
                    @Html.Raw(Model.IsEntity ? "    " : string.Empty)if(IsBeingPopulated @if(Model.IsEntity){<text> || ((IEntity)this).PocoState is PocoState.Created</text>})
                    @Html.Raw(Model.IsEntity ? "    " : string.Empty){
                        @Html.Raw(Model.IsEntity ? "    " : string.Empty)@Html.Raw($"_initial{fieldName}.Add(item)");
                    @Html.Raw(Model.IsEntity ? "    " : string.Empty)}
                @if(Model.IsEntity)
                {
                    <text>                    }
                    else {
                        @Html.Raw($"{fieldName}.Remove(item)");
                    }
</text>
                }
                }
            }
                @if(Model.IsEntity)
                {
                    <text>            if(IsBeingPopulated || @Html.Raw($"_is_set{fieldName}") || ((IEntity)this).PocoState is PocoState.Created)
            {
</text>
                }
            @Html.Raw(Model.IsEntity ? "    " : string.Empty)@Html.Raw($"OnPocoChanged({@pm.Name}Prop)");
            @Html.Raw(Model.IsEntity ? "    " : string.Empty)OnPropertyChanged(nameof(@pm.Name));
                @if(Model.IsEntity)
                {
                    <text>            }
</text>
                }
        }
    }

    private bool @Html.Raw($"Is{pm.Name}Initial()") => Enumerable.SequenceEqual(
            @Html.Raw($"{fieldName}.OrderBy(o => o.GetHashCode()),") 
            @Html.Raw($"_initial{fieldName}.OrderBy(o => o.GetHashCode()),")
            ReferenceEqualityComparer.Instance
        );


</text>
    }
    else
    {
        <text>    private bool @Html.Raw($"Is{pm.Name}Initial()") => @Html.Raw($"_initial{fieldName} == {fieldName}");

</text>
    }

    <text>    private bool @Html.Raw($"Is{pm.Name}Modified()") => @if(Model.IsEntity){<text>@Html.Raw($"_is_set{fieldName}") 
        && </text>}((IPoco)this).PocoState is PocoState.Modified
                && !@Html.Raw($"Is{pm.Name}Initial()");

    @if(Model.IsEntity)
    {
        <text>    private bool @Html.Raw($"Is{pm.Name}Set()") => @Html.Raw($"_is_set{fieldName}") || ((IEntity)this).PocoState is PocoState.Created;
</text>
    }

    private void @Html.Raw($"{pm.Name}CancelChange()")
    {
        @if(pm.IsList)
        {
            <text>        for(int i = @Html.Raw($"{fieldName}.Count") - 1; i >= 0; --i)
        {
            if(!@Html.Raw($"_initial{fieldName}.Contains({fieldName}[i])"))
            {
                @Html.Raw($"{fieldName}.RemoveAt(i)");
            }
        }
        foreach(var item in @Html.Raw($"_initial{fieldName}"))
        {
            if(!@Html.Raw($"{fieldName}.Contains(item)"))
            {
                @Html.Raw($"{fieldName}.Add(item)");
            }
        }

</text>
        }
        else
        {
            <text>        @Html.Raw($"{fieldName} = _initial{fieldName}");

</text>
        }
        OnPocoChanged(@Html.Raw($"{pm.Name}Prop"));
        OnPropertyChanged(@Html.Raw($"\"{pm.Name}\""));

    }

    @if(!Model.IsEntity)
    {
        <text>    private void @Html.Raw($"{pm.Name}AcceptChange()")
    {
        @if(pm.IsList)
        {

        }
        else 
        {
            <text>        @Html.Raw($"_initial{fieldName} = {fieldName}");
</text>
        }
    }
</text>
    }


</text>
}

@Html.Raw("#endregion Poco Changed");
