@using Net.Leksi.Pocota.Common;
@model ClassModel

@Html.Raw("#region Properties")

@foreach (PropertyModel pm in Model.Properties)
{
    string fieldName = $"_{pm.Name.Substring(0, 1).ToLower()}{pm.Name.Substring(1)}";
    if(!pm.IsList)
    {
        <text>    private void @Html.Raw($"Set{pm.Name}({pm.Type}{(pm.IsNullable ? "?" : string.Empty)} value)")
    {
    @if(!pm.IsReadOnly)
    {
        if(pm.IsList)
        {
            <text>        throw new NotImplementedException();
</text>
        }
        else
        {
        <text>        if(@fieldName != value)
        {
            lock(_lock)
            {
                if(@fieldName != value @if(Model.IsEntity){<text> && (IsBeingPopulated || @Html.Raw($"Is{pm.Name}Set()"))</text>})
                {
                    @if(pm.IsPoco)
                    {
                        <text>                    if(@fieldName is {})
                    {
                        @Html.Raw($"{fieldName}.PocoChanged -= {pm.Name}PocoChanged");
                        @Html.Raw($"{fieldName}.DeletionRequested -= {pm.Name}DeletionRequested");
                    }
</text>   
                    }
                    @if (Model.IsEntity)
                    {
                    <text>                    if (!IsBeingPopulated || @Html.Raw($"Is{pm.Name}Initial()"))
                    {
                        @fieldName = value;
                    }
</text>
                    }
                    else 
                    {
                        <text>                        @fieldName = value;
</text>
                    }
                    if (IsBeingPopulated @if(Model.IsEntity){<text> || ((IEntity)this).PocoState is PocoState.Created</text>})
                    {
                        if(IsBeingPopulated)
                        {
                            @Html.Raw($"_initial{fieldName}") = value;
                        }
                        @if (Model.IsEntity)
                        {
                            <text>                        @Html.Raw($"_is_set{fieldName}") = true;
</text>
                        }
                    }
                    @if(pm.IsPoco)
                    {
                        <text>                    if(@fieldName is {})
                    {
                        @Html.Raw($"{fieldName}.PocoChanged += {pm.Name}PocoChanged");
                        @Html.Raw($"{fieldName}.DeletionRequested += {pm.Name}DeletionRequested");
                    }
</text>   
                    }
                    OnPocoChanged(@Html.Raw($"{pm.Name}Prop"));
                    OnPropertyChanged(@Html.Raw($"nameof({pm.Name})"));
                }
            }
        }
</text>
            }
        }
    }
</text>
    }
    <text>    

    public virtual @Html.Raw(pm.Type)@if (pm.IsNullable) {<text>?</text> } @pm.Name
    {
        get => @if(Model.IsEntity){<text>@Html.Raw($"!Is{pm.Name}Set()") ? default! : </text>}@fieldName;
    @if(!pm.IsReadOnly)
    {
        if(pm.IsList)
        {
            <text>        set => throw new NotImplementedException();
</text>
        }
        else
        {
            <text>        set => @Html.Raw($"Set{pm.Name}(value)");
</text>
        }
    }
    }

</text>
}
@Html.Raw("#endregion Properties");
