@page
@using Net.Leksi.Pocota.Common;
@model ClassModel

//------------------------------
// Client implementation
// @string.Join(".", new string[] { Model.NamespaceValue, Model.ClassName})
// (Generated automatically @DateTime.Now.ToString("s"))
//------------------------------

@foreach (string usng in Model.Usings.OrderBy(v => v))
{
    <text>using @usng;
</text>
}

namespace @Model.NamespaceValue;

public @if (Model.IsAbstract)
{
    <text>abstract </text>
}
class @Model.ClassName: @if(Model.IsEntity)
{
    <text>EntityBase</text>
}
else
{
    <text>EnvelopeBase</text>
}, IProjector
{

@Html.Raw("#region Projection classes");
@foreach (ClassModel model in Model.Classes)
{
    @Html.Partial("Projection", model)
}
@Html.Raw("#endregion Projection classes");

    @Html.Partial("StaticConstructor", Model)
    
    @Html.Partial("Fields", Model)

    @Html.Partial("Properties", Model)

    public @Html.Raw($"{Model.ClassName}(IServiceProvider services) : base(services)") 
    { 
        @foreach(PropertyModel pm in Model.Properties.Where(p => p.IsList))
        {
            string fieldName = "_" + pm.Name.Substring(0, 1).ToLower() + pm.Name.Substring(1);
            <text>        @Html.Raw($"{fieldName}.CollectionChanged += {pm.Name}CollectionChanged");
</text>
        }
    }

    @Html.Partial("StaticMethods", Model)

    public override @Html.Raw($"Properties<PocoBase>") GetProperties() => Properties[typeof(@Model.ClassName)];

    public override object? As(Type type)
    {
        @foreach (ClassModel model1 in Model.Classes)
        {
            <text>        if(type == typeof(@Html.Raw(model1.ClassName)) || type == typeof(@Html.Raw(model1.Interface)))
        {
            @Html.Raw($"_as{model1.ClassName}") ??= new(this);
            return @Html.Raw($"_as{model1.ClassName}");
        }
</text>
        }
        return null;
    }

    @Html.Partial("Collections", Model)

    @Html.Partial("PocoChanged", Model)

    @foreach(MethodModel mm in Model.Methods)
    {
        <text>    public abstract @mm.ReturnType @mm.Name@Html.Raw("(")@string.Join(", ", mm.Parameters.Select(p => $"{p.Type} {p.Name}")));
</text>
    }

}


