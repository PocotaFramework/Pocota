@page
@using Net.Leksi.Pocota.Common
@model ClassModel
@Html.Partial("HeaderComment", Model)

@foreach (string usng in Model.Usings.OrderBy(v => v))
{
    <text>using @usng;
</text>
}

namespace @Model.NamespaceValue;

public class @Model.ClassName: @Html.Raw(string.Join(", ", Model.Interfaces))
{
    private static string[] s_names = new string[] { @Html.Raw(string.Join(", ", Model.PrimaryKeys.Select(k => $"\"{k.Name}\""))) };

    private readonly IServiceProvider _services;
    private readonly WeakReference _source = new(null);

    @foreach(PrimaryKeyFieldModel pkm in Model.PrimaryKeys)
    {
        string fieldName = $"_{pkm.Name.Substring(0, 1).ToLower()}{pkm.Name.Substring(1)}";
        <text>    private @Html.Raw(pkm.Type) @fieldName = default!;
</text>
    }

    public IProjector? Source 
    { 
        get => (IProjector?)_source.Target; 
        internal set 
        {
            _source.Target = value;
        }
    }

    public object? this[int index]
    {
        get => this[s_names[index]];
        set => this[s_names[index]] = value;
    }

    public object? this[string name]
    {
        get 
        {
            switch(name)
            {
                @foreach(PrimaryKeyFieldModel pkm in Model.PrimaryKeys)
                {
                    <text>                case @Html.Raw($"\"{pkm.Name}\""):
                    return @pkm.Name;
</text>
                }
                default:
                    throw new @Html.Raw($"{nameof(IndexOutOfRangeException)}($\"{{name}}\")");
            }
        }
        set 
        {
            switch(name)
            {
                @foreach(PrimaryKeyFieldModel pkm in Model.PrimaryKeys)
                {
                    <text>                case @Html.Raw($"\"{pkm.Name}\""):
                    @pkm.Name = @Html.Raw($"({pkm.Type})value!");
                    break;
</text>
                }
                default:
                    throw new @Html.Raw($"{nameof(IndexOutOfRangeException)}($\"{{name}}\")");
            }
        }
    }

@foreach (PrimaryKeyFieldModel pkm in Model.PrimaryKeys)
    {

    }

    @foreach(PrimaryKeyFieldModel pkm in Model.PrimaryKeys)
    {
        string fieldName = $"_{pkm.Name.Substring(0, 1).ToLower()}{pkm.Name.Substring(1)}";
        <text>    public @Html.Raw(pkm.Type) @pkm.Name
    {
        get 
        {
            @if(pkm.KeyReference is {})
            {
                <text>            if(_source.Target is {})
            {
                return @Html.Raw($"(((IEntity)(({Model.ReferencedClass})_source.Target).{pkm.Property}).PrimaryKey as {pkm.KeyType})!.{pkm.KeyReference}");
            }
            return @fieldName;
</text>
            }
            else if(pkm.Property is {})
            {
            <text>            if(_source.Target is {})
            {
                return @Html.Raw($"(({Model.ReferencedClass})_source.Target).{pkm.Property}");
            }
            return @fieldName;
</text>
            }
            else
            {
            <text>           return @fieldName;
</text>
            }
        }
        set
        {
            @if(pkm.KeyReference is {})
            {
                <text>            if(_source.Target is {})
            {
                @Html.Raw($"(((IEntity)(({Model.ReferencedClass})_source.Target).{pkm.Property}).PrimaryKey as {pkm.KeyType})!.{pkm.KeyReference}") = value;
            }
            else 
            {
                @fieldName = value;
            }
</text>
            }
            else if(pkm.Property is {})
            {
                <text>            if(_source.Target is {})
            {
                @Html.Raw($"(({Model.ReferencedClass})_source.Target).{pkm.Property}") = value;
            }
            @fieldName = value;
</text>
            }
            else
            {
            <text>           @fieldName = value;
</text>
            }
        }
    }

</text>
    }

    public @Html.Raw("IEnumerable<string>") Names => s_names.Select(n => n);

    public @Html.Raw("IEnumerable<object?>") Items => s_names.Select(n => this[n]);



    public @Html.Raw($"{Model.ClassName}(IServiceProvider services)")
    {
        _services = services;
    }

    public override bool Equals(object? obj)
    {
        return obj is @Model.ClassName other && Enumerable.SequenceEqual(Items, other.Items);
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(@Html.Raw(string.Join(", ", Model.PrimaryKeys.Select(p => p.Name))));
    }


    public void Assign(Net.Leksi.Pocota.Server.IPrimaryKey other)
    {
        if(other is not @Html.Raw(Model.ClassName))
        {
            throw new ArgumentException($"{nameof(other)} must be the @Html.Raw(Model.ClassName)!");
        }
        foreach(string name in s_names)
        {
            other[name] = this[name];
        }
    }

    public @Html.Raw("bool TryGetPresets(string property, Dictionary<string, object> presets)")
    {
        presets.Clear();
        switch(property)
        {
            @foreach (string? property in Model.PrimaryKeys.Where(p => p.Property is {}).Select(p => p.Property).Distinct())
            {
                <text>            case @Html.Raw($"\"{property!}\""):
                @foreach(PrimaryKeyFieldModel pkm in Model.PrimaryKeys.Where(p => property!.Equals(p.Property)))
                {
                    if(pkm.KeyReference is {})
                    {
                        <text>                presets.Add("@pkm.KeyReference", @pkm.Name);
</text>
                    }
                    else 
                    {
                        <text>                presets.Add(string.Empty, @pkm.Name);
</text>
                    }
                }
                return true;
</text>
            }
        }
        return false;
    }

}