@page
@using Net.Leksi.Pocota
@using Net.Leksi.Pocota.FrameworkGenerator
@using Net.Leksi.Pocota.FrameworkGenerator.Pages.Server
@model DtoModel
@Html.Partial("Header", Model)

public class @Model.ClassName@if(Model.BaseClasses.Any()){<text>: @Html.Raw(string.Join(", ", Model.BaseClasses))</text>}

{
    private const string s_notBuilding = "Not at Building stage!";
    private const string s_notDeserialization = "Not at Deserialization stage!";
    private const string s_notSet = "Not set!";
    private const string s_invalidTargetType = "The argument target must have type @Model.FullName!";
@if(Model.PocoKind is PocoKind.Entity)
{
    <text>    private const string s_notAccessGiving = "Not at AccessGiving stage!";
    private const string s_notAccessGivingSerializationDeserialization = 
        "Not at AccessGiving, Serialization or Deserialization stage!";
</text>
}
#region PropertiesClasses
@foreach (PropertyModel pm in Model.Properties)
{
    <text>    public class @pm.Name@{}PropertyClass: @(Model.PocoKind is PocoKind.Entity ? nameof(IEntityProperty) : nameof(IProperty))
    {
        public string Name => "@pm.Name";
        public Type Type => typeof(@Html.Raw(pm.TypeName));
        public Type ItemType => typeof(@Html.Raw(pm.ItemTypeName));
        public bool IsCollection => @(pm.IsCollection ? "true" : "false");
        public bool IsNullable => @(pm.IsNullable ? "true" : "false");
        public bool IsReadOnly => @(pm.IsReadOnly ? "true" : "false");
        public @nameof(PocoKind) PocoKind  => @nameof(PocoKind).@pm.PocoKind;
        public object? GetValue(object target)
        {
            if(target is @Model.ClassName obj)
            {
                return @if (pm.IsSelf) {<text>obj</text>}else{<text>obj.Get@{}@pm.Name@{}Value()</text>};
            }
            throw new ArgumentException(s_invalidTargetType);
        }
        public void SetValue(object target, object? value)
        {
            if(target is @Model.ClassName obj)
            {
                @if (!pm.IsSelf) 
                {
                    <text>                obj.Set@{}@pm.Name@{}Value(value)
</text>
                };
            }
            throw new ArgumentException(s_invalidTargetType);
        }
        public bool IsSet(object target)
        {
            if(target is @Model.ClassName obj)
            {
                return @if (pm.IsSelf) {<text>true</text>}else{<text>obj._@pm.Name@{}IsSet</text>};
            }
            throw new ArgumentException(s_invalidTargetType);
        }
    @if(Model.PocoKind is PocoKind.Entity)
    {
        <text>        public Access? GetAccess(object target)
        {
            if(target is @Model.ClassName obj)
            {
                return obj.Get@{}@pm.Name@{}Access();
            }
            throw new ArgumentException(s_invalidTargetType);
        }
        public void SetAccess(object target, Access access)
        {
            if(target is @Model.ClassName obj)
            {
                obj.Set@{}@pm.Name@{}Access(access);
            }
            throw new ArgumentException(s_invalidTargetType);
        }

</text>
    }
    }
</text>
}
#endregion PropertiesClasses
@if(Model.PocoKind is PocoKind.Entity)
{
    ViewDataDictionary vdd = new(ViewData);
    vdd["indentation"] = 4;
    <text>#region PropertyUse
    private static PropertyUse s_propertyUse = @Html.Partial("PropertyUse", Model.PropertyUse, vdd);
#endregion PropertyUse
</text>
}

#region Fields
@foreach (PropertyModel pm in Model.Properties)
{
    <text>    internal static @pm.Name@{}PropertyClass s_@pm.Name@{}Property = new();
</text>
}
    private readonly IPocoContext _pocoContext;
@foreach (PropertyModel pm in Model.Properties)
{
    if (!pm.IsSelf)
    {
        <text>    private @Html.Raw(pm.TypeName)@(pm.IsNullable ? "?" : string.Empty) _@pm.Name@(!pm.IsNullable && pm.Type.IsClass ? " = null!" : string.Empty);
    private bool _@pm.Name@{}IsSet = false;    
</text>
    }
    
    @if(Model.PocoKind is PocoKind.Entity)
    {
        <text>    private Access _@pm.Name@{}Access = Access.Full;
</text>
    }
}
#endregion Fields

#region Properties
@if(Model.PocoKind is PocoKind.Entity)
{
    <text>    PropertyUse @nameof(IPropertyUseAware)@{}.PropertyUse => s_propertyUse;
</text>
}
@foreach(PropertyModel pm in Model.Properties.Where(p => !p.IsSelf))
{
    <text>    public override @Html.Raw(pm.TypeName)@(pm.IsNullable ? "?" : string.Empty) @pm.Name 
    { 
        get
        {
            if(_@pm.Name@{}IsSet)
            {
                return _@pm.Name;
            }
            throw new InvalidOperationException(s_notSet);
        }

    @if(!pm.IsPrimaryKey)
    {
        <text>        set
        {
            if(_pocoContext.ProcessingStage is ProcessingStage.Building)
            {
                _@pm.Name = value;
                _@pm.Name@{}IsSet = true;
            }
            else{
                throw new InvalidOperationException(s_notBuilding);
            }
        }
</text>
    }
    }
</text>
}
#endregion Properties
    public @Model.ClassName@{}(IServiceProvider services)
    {
        _pocoContext = services.GetRequiredService<IPocoContext>();
    }
#region SettersGetters
@foreach (PropertyModel pm in Model.Properties)
{
    if(!pm.IsSelf)
    {
        <text>    private void Set@{}@pm.Name@{}Value(object? value)
    {
        if(_pocoContext.ProcessingStage is ProcessingStage.Deserialization)
        {
            _@pm.Name = (@Html.Raw(pm.TypeName))value!;
            _@pm.Name@{}IsSet = true;
        }
        else{
            throw new InvalidOperationException(s_notDeserialization);
        }
    }
    private @Html.Raw(pm.TypeName)@(pm.IsNullable ? "?" : string.Empty) Get@{}@pm.Name@{}Value()
    {
        if(_pocoContext.ProcessingStage is ProcessingStage.Serialization)
        {
            if(_@pm.Name@{}IsSet)
            {
                return _@pm.Name;
            }
            throw new InvalidOperationException("Not set!");
        }
        throw new InvalidOperationException("Not at Serialization stage!");
    }
</text>
    }
    @if(Model.PocoKind is PocoKind.Entity)
    {
        <text>    private Access Get@{}@pm.Name@{}Access()
    {
        if(
            _pocoContext.ProcessingStage is ProcessingStage.Serialization
            || _pocoContext.ProcessingStage is ProcessingStage.Deserialization
            || _pocoContext.ProcessingStage is ProcessingStage.AccessGiving
        )
        {
        @if(pm.IsSelf)
        {
            <text>            return _@pm.Name@{}Access;
</text>
        }
        else
        {
            <text>            if(_@pm.Name@{}IsSet)
            {
                return _@pm.Name@{}Access;
            }
            else
            {
                throw new InvalidOperationException(s_notSet);
            }
</text>
        }
        }
        throw new InvalidOperationException(s_notAccessGivingSerializationDeserialization);
    }
    private void Set@{}@pm.Name@{}Access(Access access)
    {
        if(
            _pocoContext.ProcessingStage is ProcessingStage.AccessGiving
        )
        {
        @if(pm.IsSelf)
        {
            <text>            _@pm.Name@{}Access = access;
</text>
        }
        else
        {
            <text>            if(_@pm.Name@{}IsSet)
            {
                _@pm.Name@{}Access = access;
            }
            else
            {
                throw new InvalidOperationException(s_notSet);
            }
</text>
        }
        }
        else{
            throw new InvalidOperationException(s_notAccessGiving);
        }
    }
</text>
    }
}
#endregion SettersGetters
@if(Model.PocoKind is PocoKind.Entity)
{
    <text>    IEnumerable<object> @nameof(IEntity)@{}.GetPrimaryKey()
    {
@foreach (PropertyModel pm in Model.Properties.Where(v => v.IsPrimaryKey).OrderBy(v => v.Name))
{
    if(pm.PocoKind is PocoKind.Entity)
    {
        <text>        foreach (object pk in ((@nameof(IEntity))_@pm.Name).GetPrimaryKey())
        {
            yield return pk;
        }
</text>
    }
    else
    {
        <text>        yield return _@pm.Name;
</text>
    }
}
    }

</text>
}
}