@page
@using Net.Leksi.Pocota
@using Net.Leksi.Pocota.FrameworkGenerator
@using Net.Leksi.Pocota.FrameworkGenerator.Pages.Server
@model DtoModel
@Html.Partial("Header", Model)

public class @Model.ClassName@{}(IPocoContext pocoContext)@if(Model.BaseClasses.Any()){<text>: @string.Join(", ", Model.BaseClasses)</text>}

{
    private const string s_notBuilding = "Not at Building stage!";
    private const string s_notDeserialization = "Not at Deserialization stage!";
    private const string s_notAccessGivingSerializationDeserialization = 
        "Not at AccessGiving, Serialization or Deserialization stage!";
    private const string s_notSet = "Not set!";
    private const string s_notAccessGiving = "Not at AccessGiving stage!";
#region PropertiesClasses
@foreach (PropertyModel pm in Model.Properties)
{
    <text>    public class @pm.Name@{}PropertyClass: @(Model.PocoKind is PocoKind.Entity ? nameof(IEntityProperty) : nameof(IProperty))
    {
        public string Name => "@pm.Name";
        public Type Type => typeof(@Html.Raw(pm.TypeName));
        public Type ItemType => typeof(@Html.Raw(pm.ItemTypeName));
        public bool IsCollection => @(pm.IsCollection ? "true" : "false");
        public bool IsNullable => @(pm.IsNullable ? "true" : "false");
        public bool IsReadOnly => @(pm.IsReadOnly ? "true" : "false");
        public bool IsPoco  => @(pm.IsPoco ? "true" : "false");
        public object? GetValue(object obj)
        {
            if(obj is @Model.ClassName obj1)
            {
                return obj1.Get@{}@pm.Name@{}Value();
            }
            throw new ArgumentException(nameof(obj));
        }
        public void SetValue(object obj, object? value)
        {
            if(obj is @Model.ClassName obj1)
            {
                obj1.Set@{}@pm.Name@{}Value(value);
            }
            throw new ArgumentException(nameof(obj));
        }
        public bool IsSet(object obj)
        {
            if(obj is @Model.ClassName obj1)
            {
                return obj1._@pm.Name@{}IsSet;
            }
            throw new ArgumentException(nameof(obj));
        }
    @if(Model.PocoKind is PocoKind.Entity)
    {
        <text>        public Access? GetAccess(object obj)
        {
            return (obj as @Model.ClassName)?.Get@{}@pm.Name@{}Access();
        }
        public void SetAccess(object obj, Access access)
        {
            (obj as @Model.ClassName)?.Set@{}@pm.Name@{}Access(access);
        }

</text>
    }
    }
</text>
}
#endregion PropertiesClasses
#region Fields
    private readonly IPocoContext _pocoContext = pocoContext;
@foreach (PropertyModel pm in Model.Properties)
{
    <text>    private @Html.Raw(pm.TypeName)@(pm.IsNullable ? "?" : string.Empty) _@pm.Name@(!pm.IsNullable && pm.Type.IsClass ? " = null!" : string.Empty);
    private Access _@pm.Name@{}Access = Access.Full;
    private bool _@pm.Name@{}IsSet = false;
</text>
}
#endregion Fields

#region Properties
@foreach(PropertyModel pm in Model.Properties)
{
    <text>    public override @Html.Raw(pm.TypeName)@(pm.IsNullable ? "?" : string.Empty) @pm.Name 
    { 
        get
        {
            if(_@pm.Name@{}IsSet)
            {
                return _@pm.Name;
            }
            throw new InvalidOperationException("Not set!");
        }
        set
        {
            if(_pocoContext.ProcessingStage is ProcessingStage.Building)
            {
                _@pm.Name = value;
                _@pm.Name@{}IsSet = true;
            }
            else{
                throw new InvalidOperationException(s_notBuilding);
            }
        }
    }
</text>
}
#endregion Properties
#region SettersGetters
@foreach (PropertyModel pm in Model.Properties)
{
    <text>    private void Set@{}@pm.Name@{}Value(object? value)
    {
        if(_pocoContext.ProcessingStage is ProcessingStage.Deserialization)
        {
            _@pm.Name = (@Html.Raw(pm.TypeName))value!;
            _@pm.Name@{}IsSet = true;
        }
        else{
            throw new InvalidOperationException(s_notDeserialization);
        }
    }
    private @Html.Raw(pm.TypeName)@(pm.IsNullable ? "?" : string.Empty) Get@{}@pm.Name@{}Value()
    {
        if(_pocoContext.ProcessingStage is ProcessingStage.Serialization)
        {
            if(_@pm.Name@{}IsSet)
            {
                return _@pm.Name;
            }
            throw new InvalidOperationException("Not set!");
        }
        throw new InvalidOperationException("Not at Serialization stage!");
    }
    @if(Model.PocoKind is PocoKind.Entity)
    {
        <text>    private Access Get@{}@pm.Name@{}Access()
    {
        if(
            _pocoContext.ProcessingStage is ProcessingStage.Serialization
            || _pocoContext.ProcessingStage is ProcessingStage.Deserialization
            || _pocoContext.ProcessingStage is ProcessingStage.AccessGiving
        )
        {
            if(_@pm.Name@{}IsSet)
            {
                return _@pm.Name@{}Access;
            }
            throw new InvalidOperationException("Not set!");
        }
        throw new InvalidOperationException(s_notAccessGivingSerializationDeserialization);
    }
    private void Set@{}@pm.Name@{}Access(Access access)
    {
        if(
            _pocoContext.ProcessingStage is ProcessingStage.AccessGiving
        )
        {
            if(_@pm.Name@{}IsSet)
            {
                _@pm.Name@{}Access = access;
            }
            else
            {
                throw new InvalidOperationException(s_notSet);
            }
        }
        else{
            throw new InvalidOperationException(s_notAccessGiving);
        }
    }
</text>
    }
</text>
}
#endregion SettersGetters
}