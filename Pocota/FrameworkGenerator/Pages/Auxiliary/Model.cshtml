@page
@using Net.Leksi.Pocota
@using Net.Leksi.Pocota.FrameworkGenerator
@using Net.Leksi.Pocota.Pages.Auxiliary
@model ModelModel
@foreach (string usng in Model.Usings.OrderBy(v => v))
{
    <text>using @usng;
</text>
}
@if (!string.IsNullOrEmpty(Model.Namespace))
{
    <text>namespace @Model.Namespace;
</text>    
}
public class @Model.ClassName@{}@if(Model.BaseClasses.Any()){<text>: @string.Join(", ", Model.BaseClasses)</text>}

{
    private readonly @nameof(IServiceProvider) _serviceProvider;
    private readonly @nameof(Contract) _contract;
    public @Model.ClassName@{}(@nameof(IServiceProvider) serviceProvider)
    {
        _serviceProvider = serviceProvider;
        _contract = serviceProvider.GetRequiredService@{}@Html.Raw($"<{nameof(Contract)}>")@{}();
    }
@foreach(PropertyModel pm in Model.Properties)
{
    <text>    private     @Html.Raw(pm.ItemTypeName)? _@pm.Name = default;
    public override @Html.Raw(pm.TypeName)@(pm.IsNullable ? "?" : string.Empty) @pm.Name 
    {
        get
        {
            @if(pm.PocoKind is not PocoKind.None)
            {
                <text>            if(_@pm.Name == default){
                    _@pm.Name = _serviceProvider.GetService@{}@Html.Raw($"<{pm.ItemTypeName}?>")@{}();
            }
            _contract.Property(this, "@pm.Name", _@pm.Name);
            if(_@pm.Name is { })
            {
                return (@Html.Raw(pm.TypeName)@(pm.IsNullable ? "?" : string.Empty))@if (pm.IsCollection){<text>new List@{}@Html.Raw($"<{pm.ItemTypeName}>")@{}(){ _@pm.Name }</text>}else{<text>_@pm.Name</text>};
            }
</text>
            }
            else
            {
                <text>            _contract.Property(this, "@pm.Name", default);
</text>
            }
            return default;
        }
    @if(!pm.IsReadOnly)
    {
        <text>        set
        {
            throw new @nameof(NotImplementedException)@{}();
        }
</text>
    }
    }
</text>

}
}
