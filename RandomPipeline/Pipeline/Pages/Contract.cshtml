@page
@using Net.Leksi.Pocota.Pipeline
@model ContractModel
@foreach (string usng in Model.Usings.OrderBy(v => v))
{
    <text>using @usng;
</text>
}
@if(Model.Namespace is { })
{
    <text>
namespace @Model.Namespace;
</text>
}

public class @Model.ClassName: Contract
{
    public override string RoutePrefix => "/api";

    public override void ConfigurePocos()
    {
@foreach(Node node in Model.Nodes)
{
    @if(node.Kind is NodeKind.Entity)
    {
        <text>        Entity@{}@Html.Raw($"<{node.Name}>")@{}()@if(node.PrimaryKey is { } && node.PrimaryKey.Any(p => node.Properties.Any(p1 => p1.Name.Equals(p.Name))))
        {
            <text>
            .PrimaryKey(o => new object[]{@string.Join(", ", node.PrimaryKey.Where(p => node.Properties.Any(p1 => p1.Name.Equals(p.Name))).Select(p => $"o.{p.Name}"))})</text>
        }@if(node.AccessSelectorPaths is { } && node.AccessSelectorPaths.Any())
        {
            <text>
            .AccessSelector(o => new object[]{
                @Html.Raw(string.Join(",\r\n                ", node.AccessSelectorPaths.Select(v => $"o{v}")))
            })</text>
        }@if(node.Properties.Any(p => p.IsComposition))
        {
            <text>
            .Composition(o => new object[]{@string.Join(", ", node.Properties.Where(p => p.IsComposition).Select(p => $"o.{p.Name}"))})</text>
        };
</text>        
    }
    else
    {
        <text>        Envelope@{}@Html.Raw($"<{node.Name}>")@{}();
</text>        
    }
}
    }

@foreach (Node node in Model.Nodes)
{
    foreach(MethodHolder mh in node.Methods)
    {
        <text>    //[Authorize(Roles = "@mh.Authorize")]
    public @(
            mh.IsCollection ? Html.Raw("List<") : string.Empty
            )@node.Name@(
            mh.IsCollection ? Html.Raw(">") : string.Empty
        ) @mh.Name@{}(@Html.Raw(string.Join(", ", mh.Params.Select(p => $"{p.TypeName} {p.Name}"))))
    {
        Output@{}@Html.Raw($"<{node.Name}>")@{}(o => new object[]{
            @Html.Raw(string.Join(",\r\n            ", mh.OutputPaths!.Select(v => (v.StartsWith("#") ? $"Mandatory(o.{v.Substring(1)})" : $"o{v}"))))
        });
        throw new NotImplementedException();
    }
</text>
    }
}
}